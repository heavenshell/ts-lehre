import { jsonOutputter, stringOutputter } from '.'

describe('outputters', () => {
  const code = [
    'const foo = () => {}',
    'const bar = (arg1: string, arg2: number) => {}',
    'function baz<T>(arg1: new () => T): T {}',
    'interface Foo {',
    '  foo(arg1: string, arg2: number): string',
    '}',
    'interface Props {',
    '  onClick(event: any): void',
    '}',
    'class Bar implements Foo {',
    '  props: Props',
    '  foo(arg1: string, arg2: number): number {}',
    '  private bar(arg1: number) {',
    '    const baz = (arg1) => {}',
    '  }',
    '}',
  ].join('\n')
  const docs = [
    {
      doc: ['/**', ' * foo.', ' */'].join('\n'),
      start: { line: 0, column: 0 },
      end: { line: 0, column: 20 },
      type: 'function',
    },
    {
      doc: [
        '/**',
        ' * bar.',
        ' *',
        ' * @param {string} arg1',
        ' * @param {number} arg2',
        ' */',
      ].join('\n'),
      start: { line: 1, column: 0 },
      end: { line: 1, column: 46 },
      type: 'function',
    },
    {
      doc: [
        '/**',
        ' * baz.',
        ' *',
        ' * @param {Class} arg1',
        ' * @returns {T}',
        ' */',
      ].join('\n'),
      start: { line: 2, column: 0 },
      end: { line: 2, column: 40 },
      type: 'function',
    },
    {
      doc: ['/**', ' * Foo.', ' */'].join('\n'),
      start: { line: 3, column: 0 },
      end: { line: 5, column: 1 },
      type: 'interface',
    },
    {
      doc: [
        '  /**',
        '   * foo.',
        '   *',
        '   * @param {string} arg1',
        '   * @param {number} arg2',
        '   * @returns {string}',
        '   */',
      ].join('\n'),
      start: { line: 4, column: 2 },
      end: { line: 4, column: 41 },
      type: 'function',
    },
    {
      doc: ['/**', ' * Props.', ' */'].join('\n'),
      start: { line: 6, column: 0 },
      end: { line: 8, column: 1 },
      type: 'interface',
    },
    {
      doc: [
        '  /**',
        '   * onClick.',
        '   *',
        '   * @param {any} event',
        '   * @returns {void}',
        '   */',
      ].join('\n'),
      start: { line: 7, column: 2 },
      end: { line: 7, column: 27 },
      type: 'function',
    },
    {
      doc: ['/**', ' * Bar.', ' *', ' * @implements Foo', ' */'].join('\n'),
      start: { line: 9, column: 0 },
      end: { line: 15, column: 1 },
      type: 'class',
    },
    {
      doc: '  /**\n   * @type {Props}\n   */',
      start: { line: 10, column: 2 },
      end: { line: 10, column: 14 },
      type: 'property',
    },
    {
      doc: [
        '  /**',
        '   * foo.',
        '   *',
        '   * @param {string} arg1',
        '   * @param {number} arg2',
        '   * @returns {number}',
        '   */',
      ].join('\n'),
      start: { line: 11, column: 2 },
      end: { line: 11, column: 44 },
      type: 'function',
    },
    {
      doc: [
        '  /**',
        '   * bar.',
        '   *',
        '   * @param {number} arg1',
        '   */',
      ].join('\n'),
      start: { line: 12, column: 2 },
      end: { line: 14, column: 3 },
      type: 'function',
    },
  ]

  it('stringOutputter', () => {
    const actual = stringOutputter({
      lines: code.split('\n'),
      docs,
      filePath: '',
    })
    const expected = [
      '/**',
      ' * foo.',
      ' */',
      'const foo = () => {}',
      '/**',
      ' * bar.',
      ' *',
      ' * @param {string} arg1',
      ' * @param {number} arg2',
      ' */',
      'const bar = (arg1: string, arg2: number) => {}',
      '/**',
      ' * baz.',
      ' *',
      ' * @param {Class} arg1',
      ' * @returns {T}',
      ' */',
      'function baz<T>(arg1: new () => T): T {}',
      '/**',
      ' * Foo.',
      ' */',
      'interface Foo {',
      '  /**',
      '   * foo.',
      '   *',
      '   * @param {string} arg1',
      '   * @param {number} arg2',
      '   * @returns {string}',
      '   */',
      '  foo(arg1: string, arg2: number): string',
      '}',
      '/**',
      ' * Props.',
      ' */',
      'interface Props {',
      '  /**',
      '   * onClick.',
      '   *',
      '   * @param {any} event',
      '   * @returns {void}',
      '   */',
      '  onClick(event: any): void',
      '}',
      '/**',
      ' * Bar.',
      ' *',
      ' * @implements Foo',
      ' */',
      'class Bar implements Foo {',
      '  /**',
      '   * @type {Props}',
      '   */',
      '  props: Props',
      '  /**',
      '   * foo.',
      '   *',
      '   * @param {string} arg1',
      '   * @param {number} arg2',
      '   * @returns {number}',
      '   */',
      '  foo(arg1: string, arg2: number): number {}',
      '  /**',
      '   * bar.',
      '   *',
      '   * @param {number} arg1',
      '   */',
      '  private bar(arg1: number) {',
      '    const baz = (arg1) => {}',
      '  }',
      '}',
    ].join('\n')
    expect(actual).toBe(expected)
  })

  it('jsonOutputter', () => {
    const actual = jsonOutputter({
      lines: code.split('\n'),
      docs,
      filePath: '',
    })
    expect(JSON.stringify(docs)).toBe(actual)
  })
})
